using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using org.m2sf.m2sharp;

namespace Imitation_Tests
{
    class Program
    {
        static void Main(string[] args)
        {
            #region first sets
            List<String> lines = new List<String>();
            lines.Add("First Sets:");
            TokenSet set;
  
  /* * * headline * * */
  
  lines.Add("/* M2C FIRST set initialisers" +
    " -- generated by gen_first_sets.c */\n\n");
    
  /* definitionModule */
  set = TokenSet.newFromList(Token.DEFINITION, 0);
  lines.Add("#define INIT_FIRST_OF_DEFINITION_MODULE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* import */
  set = TokenSet.newFromList(Token.IMPORT, Token.FROM, 0);
  lines.Add("#define INIT_FIRST_OF_IMPORT \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* qualfiedImport */
  set = TokenSet.newFromList(Token.IMPORT, 0);
  lines.Add("#define INIT_FIRST_OF_QUALIFIED_IMPORT \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* unqualfiedImport */
  set = TokenSet.newFromList(Token.FROM, 0);
  lines.Add("#define INIT_FIRST_OF_UNQUALIFIED_IMPORT \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* identList */
  set = TokenSet.newFromList(Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_IDENT_LIST \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* definition */
  set = TokenSet.newFromList
    (Token.CONST, Token.TYPE, Token.VAR, Token.PROCEDURE, 0);
  lines.Add("#define INIT_FIRST_OF_DEFINITION \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* constDefinition */
  set = TokenSet.newFromList(Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_CONST_DEFINITION \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* typeDefinition */
  set = TokenSet.newFromList(Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_TYPE_DEFINITION \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* type */
  set = TokenSet.newFromList
    (Token.Identifier, Token.LeftBracket, Token.LeftParen,
     Token.SET, Token.ARRAY, Token.RECORD, Token.POINTER, Token.PROCEDURE, 0);
  lines.Add("#define INIT_FIRST_OF_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* derivedOrSubRangeType */
  set = TokenSet.newFromList(Token.Identifier, Token.LeftBracket, 0);
  lines.Add("#define INIT_FIRST_OF_DERIVED_OR_SUBRange_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* qualident */
  set = TokenSet.newFromList(Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_QUALIDENT \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* Range */
  set = TokenSet.newFromList(Token.LeftBracket, 0);
  lines.Add("#define INIT_FIRST_OF_Range \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* enumType */
  set = TokenSet.newFromList(Token.LeftParen, 0);
  lines.Add("#define INIT_FIRST_OF_ENUM_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* setType */
  set = TokenSet.newFromList(Token.SET, 0);
  lines.Add("#define INIT_FIRST_OF_SET_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* countableType */
  set = TokenSet.newFromList
    (Token.LeftBracket, Token.LeftParen, Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_COUNTABLE_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* arrayType */
  set = TokenSet.newFromList(Token.ARRAY, 0);
  lines.Add("#define INIT_FIRST_OF_ARRAY_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* extensibleRecordType */
  set = TokenSet.newFromList(Token.RECORD, 0);
  lines.Add("#define INIT_FIRST_OF_EXTENSIBLE_RECORD_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* fieldListSequence */
  set = TokenSet.newFromList(Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_FIELD_LIST_SEQUENCE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
    
  /* variantRecordType */
  set = TokenSet.newFromList(Token.RECORD, 0);
  lines.Add("#define INIT_FIRST_OF_VARIANT_RECORD_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* variantFieldListSeq */
  set = TokenSet.newFromList(Token.Identifier, Token.CASE, 0);
  lines.Add("#define INIT_FIRST_OF_VARIANT_FIELD_LIST_SEQ \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* variantFieldList */
  set = TokenSet.newFromList(Token.Identifier, Token.CASE, 0);
  lines.Add("#define INIT_FIRST_OF_VARIANT_FIELD_LIST \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* variantFields */
  set = TokenSet.newFromList(Token.CASE, 0);
  lines.Add("#define INIT_FIRST_OF_VARIANT_FIELDS \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* variant */
  set = TokenSet.newFromList
    (Token.Plus, Token.Minus, Token.NOT, Token.IntLiteral, Token.RealLiteral,
     Token.CharLiteral, Token.StringLiteral, Token.LeftBrace, Token.LeftParen,
     Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_VARIANT \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* caseLabelList */
  set = TokenSet.newFromList
    (Token.Plus, Token.Minus, Token.NOT, Token.IntLiteral, Token.RealLiteral,
     Token.CharLiteral, Token.StringLiteral, Token.LeftBrace, Token.LeftParen,
     Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_CASE_LABEL_LIST \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* caseLabels */
  set = TokenSet.newFromList
    (Token.Plus, Token.Minus, Token.NOT, Token.IntLiteral, Token.RealLiteral,
     Token.CharLiteral, Token.StringLiteral, Token.LeftBrace, Token.LeftParen,
     Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_CASE_LABELS \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* pointerType */
  set = TokenSet.newFromList(Token.POINTER, 0);
  lines.Add("#define INIT_FIRST_OF_POINTER_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* procedureType */
  set = TokenSet.newFromList(Token.PROCEDURE, 0);
  lines.Add("#define INIT_FIRST_OF_PROCEDURE_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* simpleFormalType */
  set = TokenSet.newFromList(Token.ARRAY, Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_SIMPLE_FORMAL_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* procedureHeader */
  set = TokenSet.newFromList(Token.PROCEDURE, 0);
  lines.Add("#define INIT_FIRST_OF_PROCEDURE_HEADER \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* procedureSignature */
  set = TokenSet.newFromList(Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_PROCEDURE_SIGNATURE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* simpleFormalParams */
  set = TokenSet.newFromList(Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_SIMPLE_FORMAL_PARAMS \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* implementationModule */
  set = TokenSet.newFromList(Token.IMPLEMENTATION, 0);
  lines.Add("#define INIT_FIRST_OF_IMPLEMENTATION_MODULE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* programModule */
  set = TokenSet.newFromList(Token.MODULE, 0);
  lines.Add("#define INIT_FIRST_OF_PROGRAM_MODULE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* modulePriority */
  set = TokenSet.newFromList(Token.LeftBracket, 0);
  lines.Add("#define INIT_FIRST_OF_MODULE_PRIORITY \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* block */
  set = TokenSet.newFromList
    (Token.CONST, Token.TYPE, Token.VAR, Token.PROCEDURE, Token.MODULE,
     Token.BEGIN, Token.END, 0);
  lines.Add("#define INIT_FIRST_OF_BLOCK \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* declaration */
  set = TokenSet.newFromList
    (Token.CONST, Token.TYPE, Token.VAR, Token.PROCEDURE, Token.MODULE, 0);
  lines.Add("#define INIT_FIRST_OF_DECLARATION \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* typeDeclaration */
  set = TokenSet.newFromList(Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_TYPE_DECLARATION \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* varSizeRecordType */
  set = TokenSet.newFromList(Token.VAR, 0);
  lines.Add("#define INIT_FIRST_OF_VAR_SIZE_RECORD_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* variableDeclaration */
  set = TokenSet.newFromList(Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_VARIABLE_DECLARATION \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* procedureDeclaration */
  set = TokenSet.newFromList(Token.PROCEDURE, 0);
  lines.Add("#define INIT_FIRST_OF_PROCEDURE_DECLARATION \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* moduleDeclaration */
  set = TokenSet.newFromList(Token.MODULE, 0);
  lines.Add("#define INIT_FIRST_OF_MODULE_DECLARATION \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* export */
  set = TokenSet.newFromList(Token.EXPORT, 0);
  lines.Add("#define INIT_FIRST_OF_EXPORT \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* statementSequence */
  set = TokenSet.newFromList
    (Token.Identifier, Token.RETURN, Token.WITH, Token.IF, Token.CASE,
     Token.LOOP, Token.WHILE, Token.REPEAT, Token.FOR, Token.EXIT, 0);
  lines.Add("#define INIT_FIRST_OF_STATEMENT_SEQUENCE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* statement */
  set = TokenSet.newFromList
    (Token.Identifier, Token.RETURN, Token.WITH, Token.IF, Token.CASE,
     Token.LOOP, Token.WHILE, Token.REPEAT, Token.FOR, Token.EXIT, 0);
  lines.Add("#define INIT_FIRST_OF_STATEMENT \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* AssignmentOrProcCall */
  set = TokenSet.newFromList(Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_AssignMENT_OR_PROC_CALL \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* actualParameters */
  set = TokenSet.newFromList(Token.LeftParen, 0);
  lines.Add("#define INIT_FIRST_OF_ACTUAL_PARAMETERS \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* expressionList */
  set = TokenSet.newFromList
    (Token.Plus, Token.Minus, Token.NOT, Token.IntLiteral, Token.RealLiteral,
     Token.CharLiteral, Token.StringLiteral, Token.LeftBrace, Token.LeftParen,
     Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_EXPRESSION_LIST \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* returnStatement */
  set = TokenSet.newFromList(Token.RETURN, 0);
  lines.Add("#define INIT_FIRST_OF_RETURN_STATEMENT \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* withStatement */
  set = TokenSet.newFromList(Token.WITH, 0);
  lines.Add("#define INIT_FIRST_OF_WITH_STATEMENT \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* ifStatement */
  set = TokenSet.newFromList(Token.IF, 0);
  lines.Add("#define INIT_FIRST_OF_IF_STATEMENT \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* caseStatement */
  set = TokenSet.newFromList(Token.CASE, 0);
  lines.Add("#define INIT_FIRST_OF_CASE_STATEMENT \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* case */
  set = TokenSet.newFromList
    (Token.Plus, Token.Minus, Token.NOT, Token.IntLiteral, Token.RealLiteral,
     Token.CharLiteral, Token.StringLiteral, Token.LeftBrace, Token.LeftParen,
     Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_CASE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* loopStatement */
  set = TokenSet.newFromList(Token.LOOP, 0);
  lines.Add("#define INIT_FIRST_OF_LOOP_STATEMENT \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* whileStatement */
  set = TokenSet.newFromList(Token.WHILE, 0);
  lines.Add("#define INIT_FIRST_OF_WHILE_STATEMENT \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* repeatStatement */
  set = TokenSet.newFromList(Token.REPEAT, 0);
  lines.Add("#define INIT_FIRST_OF_REPEAT_STATEMENT \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* forStatement */
  set = TokenSet.newFromList(Token.FOR, 0);
  lines.Add("#define INIT_FIRST_OF_FOR_STATEMENT \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* designator */
  set = TokenSet.newFromList(Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_DESIGNATOR \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* selector */
  set = TokenSet.newFromList
    (Token.Deref, Token.Period, Token.LeftBracket, 0);
  lines.Add("#define INIT_FIRST_OF_SELECTOR \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* expression */
  set = TokenSet.newFromList
    (Token.Plus, Token.Minus, Token.NOT, Token.IntLiteral, Token.RealLiteral,
     Token.CharLiteral, Token.StringLiteral, Token.LeftBrace, Token.LeftParen,
     Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_EXPRESSION \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* simpleExpression */
  set = TokenSet.newFromList
    (Token.Plus, Token.Minus, Token.NOT, Token.IntLiteral, Token.RealLiteral,
     Token.CharLiteral, Token.StringLiteral, Token.LeftBrace, Token.LeftParen,
     Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_SIMPLE_EXPRESSION \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* term */
  set = TokenSet.newFromList
    (Token.NOT, Token.IntLiteral, Token.RealLiteral, Token.CharLiteral, Token.StringLiteral,
     Token.LeftBrace, Token.LeftParen, Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_TERM \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* simpleTerm */
  set = TokenSet.newFromList
    (Token.NOT, Token.IntLiteral, Token.RealLiteral, Token.CharLiteral, Token.StringLiteral,
     Token.LeftBrace, Token.LeftParen, Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_SIMPLE_TERM \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* factor */
  set = TokenSet.newFromList
    (Token.IntLiteral, Token.RealLiteral, Token.CharLiteral, Token.StringLiteral,
     Token.LeftBrace, Token.LeftParen, Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_FACTOR \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* designatorOrFuncCall */
  set = TokenSet.newFromList(Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_DESIGNATOR_OR_FUNC_CALL \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* setValue */
  set = TokenSet.newFromList(Token.LeftBrace, 0);
  lines.Add("#define INIT_FIRST_OF_SET_VALUE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* element */
  set = TokenSet.newFromList
    (Token.Plus, Token.Minus, Token.NOT, Token.IntLiteral, Token.RealLiteral,
     Token.CharLiteral, Token.StringLiteral, Token.LeftBrace, Token.LeftParen,
     Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_ELEMENT \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* Option dependent FIRST sets */
  
  /* formalType */
  set = TokenSet.newFromList
    (Token.ARRAY, Token.CONST, Token.VAR, Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_FORMAL_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* attributedFormalType */
  set = TokenSet.newFromList(Token.CONST, Token.VAR, 0);
  lines.Add("#define INIT_FIRST_OF_ATTRIBUTED_FORMAL_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* formalParamList */
  set = TokenSet.newFromList
    (Token.Identifier, Token.CONST, Token.VAR, 0);
  lines.Add("#define INIT_FIRST_OF_FORMAL_PARAM_LIST \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* formalParams */
  set = TokenSet.newFromList
    (Token.Identifier, Token.CONST, Token.VAR, 0);
  lines.Add("#define INIT_FIRST_OF_FORMAL_PARAMS \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* attribFormalParams */
  set = TokenSet.newFromList(Token.CONST, Token.VAR, 0);
  lines.Add("#define INIT_FIRST_OF_ATTRIB_FORMAL_PARAMS \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* typeDeclarationTail */
  set = TokenSet.newFromList
    (Token.VAR, Token.Identifier, Token.LeftBracket, Token.LeftParen,
     Token.SET, Token.ARRAY, Token.RECORD, Token.POINTER, Token.PROCEDURE, 0);
  lines.Add("#define INIT_FIRST_OF_TYPE_DECLARATION_TAIL \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* Alternative FIRST sets */
  
  /* Alternative formalType */
  set = TokenSet.newFromList
    (Token.ARRAY, Token.VAR, Token.Identifier, 0);
  lines.Add("#define INIT_FIRST_OF_ALT_FORMAL_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* Alternative attributedFormalType */
  set = TokenSet.newFromList(Token.VAR, 0);
  lines.Add("#define INIT_FIRST_OF_ALT_ATTRIB_FORMAL_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* Alternative formalParamList */
  set = TokenSet.newFromList(Token.Identifier, Token.VAR, 0);
  lines.Add("#define INIT_FIRST_OF_ALT_FORMAL_PARAM_LIST \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* Alternative formalParams */
  set = TokenSet.newFromList(Token.Identifier, Token.VAR, 0);
  lines.Add("#define INIT_FIRST_OF_ALT_FORMAL_PARAMS \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  /* Alternative attribFormalParams */
  set = TokenSet.newFromList(Token.VAR, 0);
  lines.Add("#define INIT_FIRST_OF_ALT_ATTRIB_FORMAL_PARAMS \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
    
  /* Alternative typeDeclarationTail */
  set = TokenSet.newFromList
    (Token.Identifier, Token.LeftBracket, Token.LeftParen,
     Token.SET, Token.ARRAY, Token.RECORD, Token.POINTER, Token.PROCEDURE, 0);
  lines.Add("#define INIT_FIRST_OF_ALT_TYPE_DECL_TAIL \\\n  ");
  lines.Add(set.PrintLiteral());
  
  lines.Add("\n");
  
  lines.Add("#endif /* M2C_FIRST_SET_INITS_H */\n\n");
  
  lines.Add("/* END OF FILE */\n");
            #endregion
            
            #region follow sets
  lines.Add("Follow Sets:");

  /* * * headline * * */

  lines.Add("/* M2C FOLLOW set initialisers" +
    " -- generated by gen_follow_sets.c */\n\n");

  /* * * literal type * * */
  lines.Add("#ifndef M2C_TOKENSET_LITERAL_T\n");
  lines.Add("#define M2C_TOKENSET_LITERAL_T\n\n");

  set.PrintLiteralStruct("m2c_tokenset_literal_t");
  lines.Add("\n");

  lines.Add("#endif /* M2C_TOKENSET_LITERAL_T */\n\n");


  /* * * literals * * */

  lines.Add("#ifndef M2C_FOLLOW_SET_INITS_H\n");
  lines.Add("#define M2C_FOLLOW_SET_INITS_H\n\n");

  /* definitionModule */
  set = TokenSet.newFromList(Token.EndOfFile, 0);
  lines.Add("#define INIT_FOLLOW_OF_DEFINITION_MODULE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* import */
  set = TokenSet.newFromList
    (Token.DEFINITION, Token.BEGIN, Token.CONST, Token.END, Token.MODULE,
     Token.PROCEDURE, Token.TYPE, Token.VAR, Token.EXPORT, 0);
  lines.Add("#define INIT_FOLLOW_OF_IMPORT \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* qualfiedImport */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_QUALIFIED_IMPORT \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* unqualfiedImport */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_UNQUALIFIED_IMPORT \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* identList */
  set = TokenSet.newFromList
    (Token.Semicolon, Token.Colon, Token.RightParen, 0);
  lines.Add("#define INIT_FOLLOW_OF_IDENT_LIST \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* definition */
  set = TokenSet.newFromList(Token.END, 0);
  lines.Add("#define INIT_FOLLOW_OF_DEFINITION \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* constDefinition */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_CONST_DEFINITION \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* typeDefinition */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_TYPE_DEFINITION \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* type */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* derivedOrSubRangeType */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_DERIVED_OR_SUBRange_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* qualident */
  set = TokenSet.newFromList
    (Token.Semicolon, Token.LeftBracket, Token.Comma, Token.OF,
     Token.RightParen, Token.Assign, Token.LeftParen, Token.END,
     Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, Token.LeftBrace,
     Token.Asterisk, Token.Solidus, Token.DIV, Token.MOD, Token.AND,
     Token.Plus, Token.Minus, Token.OR, Token.Equal, Token.NotEqual,
     Token.Less, Token.LessEqual, Token.Greater, Token.GreaterEqual,
     Token.IN, Token.THEN, Token.DO, Token.TO, Token.BY,
     Token.Range, Token.RightBrace, 0);
  lines.Add("#define INIT_FOLLOW_OF_QUALIDENT \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* Range */
  set = TokenSet.newFromList
    (Token.Semicolon, Token.Comma, Token.OF, 0);
  lines.Add("#define INIT_FOLLOW_OF_Range \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* enumType */
  set = TokenSet.newFromList
    (Token.Semicolon, Token.Comma, Token.OF, 0);
  lines.Add("#define INIT_FOLLOW_OF_ENUM_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* setType */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_SET_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* countableType */
  set = TokenSet.newFromList
    (Token.Semicolon, Token.Comma, Token.OF, 0);
  lines.Add("#define INIT_FOLLOW_OF_COUNTABLE_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* arrayType */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_ARRAY_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* extensibleRecordType */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_EXTENSIBLE_RECORD_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* fieldListSequence */
  set = TokenSet.newFromList(Token.END, Token.VAR, 0);
  lines.Add("#define INIT_FOLLOW_OF_FIELD_LIST_SEQUENCE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* variantRecordType */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_VARIANT_RECORD_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* variantFieldListSeq */
  set = TokenSet.newFromList
    (Token.Bar, Token.ELSE, Token.END, 0);
  lines.Add("#define INIT_FOLLOW_OF_VARIANT_FIELD_LIST_SEQ \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* variantFieldList */
  set = TokenSet.newFromList
    (Token.Semicolon, Token.Bar, Token.ELSE, Token.END, 0);
  lines.Add("#define INIT_FOLLOW_OF_VARIANT_FIELD_LIST \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* variantFields */
  set = TokenSet.newFromList
    (Token.Semicolon, Token.Bar, Token.ELSE, Token.END, 0);
  lines.Add("#define INIT_FOLLOW_OF_VARIANT_FIELDS \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* variant */
  set = TokenSet.newFromList
    (Token.Bar, Token.ELSE, Token.END, 0);
  lines.Add("#define INIT_FOLLOW_OF_VARIANT \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* caseLabelList */
  set = TokenSet.newFromList(Token.Colon, 0);
  lines.Add("#define INIT_FOLLOW_OF_CASE_LABEL_LIST \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* caseLabels */
  set = TokenSet.newFromList
    (Token.Comma, Token.Colon, 0);
  lines.Add("#define INIT_FOLLOW_OF_CASE_LABELS \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* pointerType */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_POINTER_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* procedureType */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_PROCEDURE_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* simpleFormalType */
  set = TokenSet.newFromList
    (Token.Comma, Token.RightParen, 0);
  lines.Add("#define INIT_FOLLOW_OF_SIMPLE_FORMAL_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* procedureHeader */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_PROCEDURE_HEADER \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* procedureSignature */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_PROCEDURE_SIGNATURE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* simpleFormalParams */
  set = TokenSet.newFromList
    (Token.Semicolon, Token.RightParen, 0);
  lines.Add("#define INIT_FOLLOW_OF_SIMPLE_FORMAL_PARAMS \\\n  ");
  lines.Add(set.PrintLiteral());
  lines.Add("\n");

  /* implementationModule */
  set = TokenSet.newFromList(Token.EndOfFile, 0);
  lines.Add("#define INIT_FOLLOW_OF_IMPLEMENTATION_MODULE \\\n  ");
  lines.Add(set.PrintLiteral());
  lines.Add("\n");

  /* programModule */
  set = TokenSet.newFromList(Token.EndOfFile, 0);
  lines.Add("#define INIT_FOLLOW_OF_PROGRAM_MODULE \\\n  ");
  lines.Add(set.PrintLiteral());
  lines.Add("\n");

  /* modulePriority */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_MODULE_PRIORITY \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* block */
  set = TokenSet.newFromList(Token.Identifier, 0);
  lines.Add("#define INIT_FOLLOW_OF_BLOCK \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* declaration */
  set = TokenSet.newFromList(Token.BEGIN, Token.END, 0);
  lines.Add("#define INIT_FOLLOW_OF_DECLARATION \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* typeDeclaration */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_TYPE_DECLARATION \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* varSizeRecordType */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_VAR_SIZE_RECORD_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* variableDeclaration */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_VARIABLE_DECLARATION \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* procedureDeclaration */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_PROCEDURE_DECLARATION \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* moduleDeclaration */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_MODULE_DECLARATION \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* export */
  set = TokenSet.newFromList
    (Token.CONST, Token.TYPE, Token.VAR, Token.PROCEDURE, Token.MODULE,
     Token.BEGIN, Token.END, 0);
  lines.Add("#define INIT_FOLLOW_OF_EXPORT \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* statementSequence */
  set = TokenSet.newFromList
    (Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
  lines.Add("#define INIT_FOLLOW_OF_STATEMENT_SEQUENCE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* statement */
  set = TokenSet.newFromList
    (Token.Semicolon,
     Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
  lines.Add("#define INIT_FOLLOW_OF_STATEMENT \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* AssignmentOrProcCall */
  set = TokenSet.newFromList
    (Token.Semicolon,
     Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
  lines.Add("#define INIT_FOLLOW_OF_AssignMENT_OR_PROC_CALL \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* actualParameters */
  set = TokenSet.newFromList
    (Token.Semicolon,
     Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
  lines.Add("#define INIT_FOLLOW_OF_ACTUAL_PARAMETERS \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* expressionList */
  set = TokenSet.newFromList(Token.RightParen, 0);
  lines.Add("#define INIT_FOLLOW_OF_EXPRESSION_LIST \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* returnStatement */
  set = TokenSet.newFromList
    (Token.Semicolon,
     Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
  lines.Add("#define INIT_FOLLOW_OF_RETURN_STATEMENT \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* withStatement */
  set = TokenSet.newFromList
    (Token.Semicolon,
     Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
  lines.Add("#define INIT_FOLLOW_OF_WITH_STATEMENT \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* ifStatement */
  set = TokenSet.newFromList
    (Token.Semicolon,
     Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
  lines.Add("#define INIT_FOLLOW_OF_IF_STATEMENT \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* caseStatement */
  set = TokenSet.newFromList
    (Token.Semicolon,
     Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
  lines.Add("#define INIT_FOLLOW_OF_CASE_STATEMENT \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* case */
  set = TokenSet.newFromList
    (Token.Bar, Token.ELSE, Token.END, 0);
  lines.Add("#define INIT_FOLLOW_OF_CASE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* loopStatement */
  set = TokenSet.newFromList
    (Token.Semicolon,
     Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
  lines.Add("#define INIT_FOLLOW_OF_LOOP_STATEMENT \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* whileStatement */
  set = TokenSet.newFromList
    (Token.Semicolon,
     Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
  lines.Add("#define INIT_FOLLOW_OF_WHILE_STATEMENT \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* repeatStatement */
  set = TokenSet.newFromList
    (Token.Semicolon,
     Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
  lines.Add("#define INIT_FOLLOW_OF_REPEAT_STATEMENT \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* forStatement */
  set = TokenSet.newFromList
    (Token.Semicolon,
     Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
  lines.Add("#define INIT_FOLLOW_OF_FOR_STATEMENT \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* designator */
  set = TokenSet.newFromList
    (Token.Assign, Token.LeftParen, Token.LeftBrace,
     Token.Semicolon, Token.END, Token.ELSIF, Token.ELSE, Token.Bar,
     Token.UNTIL, Token.Asterisk, Token.Solidus, Token.DIV, Token.MOD,
     Token.AND, Token.Plus, Token.Minus, Token.OR, Token.Equal,
     Token.NotEqual, Token.Less, Token.LessEqual, Token.Greater,
     Token.GreaterEqual, Token.IN, Token.Comma, Token.RightParen,
     Token.THEN, Token.OF, Token.DO, Token.TO, Token.BY, Token.Range,
     Token.RightBrace, 0);
  lines.Add("#define INIT_FOLLOW_OF_DESIGNATOR \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* selector */
  set = TokenSet.newFromList
    (Token.Identifier,
     Token.Assign, Token.LeftParen, Token.LeftBrace,
     Token.Semicolon, Token.END, Token.ELSIF, Token.ELSE, Token.Bar,
     Token.UNTIL, Token.Asterisk, Token.Solidus, Token.DIV, Token.MOD,
     Token.AND, Token.Plus, Token.Minus, Token.OR, Token.Equal,
     Token.NotEqual, Token.Less, Token.LessEqual, Token.Greater,
     Token.GreaterEqual, Token.IN, Token.Comma, Token.RightParen,
     Token.THEN, Token.OF, Token.DO, Token.TO, Token.BY, Token.Range,
     Token.RightBrace, 0);
  lines.Add("#define INIT_FOLLOW_OF_SELECTOR \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* expression */
  set = TokenSet.newFromList
    (Token.Semicolon, Token.END, Token.ELSIF, Token.ELSE, Token.Bar,
     Token.UNTIL, Token.Comma, Token.RightParen, Token.THEN,
     Token.OF, Token.DO, Token.TO, Token.BY, Token.Range,
     Token.RightBrace, 0);
  lines.Add("#define INIT_FOLLOW_OF_EXPRESSION \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* simpleExpression */
  set = TokenSet.newFromList
    (Token.Equal, Token.NotEqual, Token.Less, Token.LessEqual,
     Token.Greater, Token.GreaterEqual, Token.IN,
     Token.Semicolon, Token.END, Token.ELSIF, Token.ELSE, Token.Bar,
     Token.UNTIL, Token.Comma, Token.RightParen, Token.THEN,
     Token.OF, Token.DO, Token.TO, Token.BY, Token.Range,
     Token.RightBrace, 0);
  lines.Add("#define INIT_FOLLOW_OF_SIMPLE_EXPRESSION \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* term */
  set = TokenSet.newFromList
    (Token.Plus, Token.Minus, Token.OR,
     Token.Equal, Token.NotEqual, Token.Less, Token.LessEqual,
     Token.Greater, Token.GreaterEqual, Token.IN,
     Token.Semicolon, Token.END, Token.ELSIF, Token.ELSE, Token.Bar,
     Token.UNTIL, Token.Comma, Token.RightParen, Token.THEN,
     Token.OF, Token.DO, Token.TO, Token.BY, Token.Range,
     Token.RightBrace, 0);
  lines.Add("#define INIT_FOLLOW_OF_TERM \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* simpleTerm */
  set = TokenSet.newFromList
    (Token.Asterisk, Token.Solidus, Token.DIV, Token.MOD, Token.AND,
     Token.Plus, Token.Minus, Token.OR,
     Token.Equal, Token.NotEqual, Token.Less, Token.LessEqual,
     Token.Greater, Token.GreaterEqual, Token.IN,
     Token.Semicolon, Token.END, Token.ELSIF, Token.ELSE, Token.Bar,
     Token.UNTIL, Token.Comma, Token.RightParen, Token.THEN,
     Token.OF, Token.DO, Token.TO, Token.BY, Token.Range,
     Token.RightBrace, 0);
  lines.Add("#define INIT_FOLLOW_OF_SIMPLE_TERM \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* factor */
  set = TokenSet.newFromList
    (Token.Asterisk, Token.Solidus, Token.DIV, Token.MOD, Token.AND,
     Token.Plus, Token.Minus, Token.OR,
     Token.Equal, Token.NotEqual, Token.Less, Token.LessEqual,
     Token.Greater, Token.GreaterEqual, Token.IN,
     Token.Semicolon, Token.END, Token.ELSIF, Token.ELSE, Token.Bar,
     Token.UNTIL, Token.Comma, Token.RightParen, Token.THEN,
     Token.OF, Token.DO, Token.TO, Token.BY, Token.Range,
     Token.RightBrace, 0);
  lines.Add("#define INIT_FOLLOW_OF_FACTOR \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* designatorOrFuncCall */
  set = TokenSet.newFromList
    (Token.Asterisk, Token.Solidus, Token.DIV, Token.MOD, Token.AND,
     Token.Plus, Token.Minus, Token.OR,
     Token.Equal, Token.NotEqual, Token.Less, Token.LessEqual,
     Token.Greater, Token.GreaterEqual, Token.IN,
     Token.Semicolon, Token.END, Token.ELSIF, Token.ELSE, Token.Bar,
     Token.UNTIL, Token.Comma, Token.RightParen, Token.THEN,
     Token.OF, Token.DO, Token.TO, Token.BY, Token.Range,
     Token.RightBrace, 0);
  lines.Add("#define INIT_FOLLOW_OF_DESIGNATOR_OR_FUNC_CALL \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* setValue */
  set = TokenSet.newFromList
    (Token.Asterisk, Token.Solidus, Token.DIV, Token.MOD, Token.AND,
     Token.Plus, Token.Minus, Token.OR,
     Token.Equal, Token.NotEqual, Token.Less, Token.LessEqual,
     Token.Greater, Token.GreaterEqual, Token.IN,
     Token.Semicolon, Token.END, Token.ELSIF, Token.ELSE, Token.Bar,
     Token.UNTIL, Token.Comma, Token.RightParen, Token.THEN,
     Token.OF, Token.DO, Token.TO, Token.BY, Token.Range,
     Token.RightBrace, 0);
  lines.Add("#define INIT_FOLLOW_OF_SET_VALUE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* element */
  set = TokenSet.newFromList
    (Token.Comma, Token.RightBrace, 0);
  lines.Add("#define INIT_FOLLOW_OF_ELEMENT \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* Option dependent FOLLOW sets */

  /* formalType */
  set = TokenSet.newFromList
    (Token.Comma, Token.RightParen, 0);
  lines.Add("#define INIT_FOLLOW_OF_FORMAL_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* attributedFormalType */
  set = TokenSet.newFromList
    (Token.Comma, Token.RightParen, 0);
  lines.Add("#define INIT_FOLLOW_OF_ATTRIBUTED_FORMAL_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* formalParamList */
  set = TokenSet.newFromList(Token.RightParen, 0);
  lines.Add("#define INIT_FOLLOW_OF_FORMAL_PARAM_LIST \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* formalParams */
  set = TokenSet.newFromList
    (Token.Semicolon, Token.RightParen, 0);
  lines.Add("#define INIT_FOLLOW_OF_FORMAL_PARAMS \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* attribFormalParams */
  set = TokenSet.newFromList
    (Token.Semicolon, Token.RightParen, 0);
  lines.Add("#define INIT_FOLLOW_OF_ATTRIB_FORMAL_PARAMS \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* typeDeclarationTail */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_TYPE_DECLARATION_TAIL \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* Alternative FOLLOW sets */

  /* Alternative formalType */
  set = TokenSet.newFromList
    (Token.Comma, Token.RightParen, 0);
  lines.Add("#define INIT_FOLLOW_OF_ALT_FORMAL_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* Alternative attributedFormalType */
  set = TokenSet.newFromList
    (Token.Comma, Token.RightParen, 0);
  lines.Add("#define INIT_FOLLOW_OF_ALT_ATTRIB_FORMAL_TYPE \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* Alternative formalParamList */
  set = TokenSet.newFromList(Token.RightParen, 0);
  lines.Add("#define INIT_FOLLOW_OF_ALT_FORMAL_PARAM_LIST \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* Alternative formalParams */
  set = TokenSet.newFromList
    (Token.Semicolon, Token.RightParen, 0);
  lines.Add("#define INIT_FOLLOW_OF_ALT_FORMAL_PARAMS \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* Alternative attribFormalParams */
  set = TokenSet.newFromList
    (Token.Semicolon, Token.RightParen, 0);
  lines.Add("#define INIT_FOLLOW_OF_ALT_ATTRIB_FORMAL_PARAMS \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  /* Alternative typeDeclarationTail */
  set = TokenSet.newFromList(Token.Semicolon, 0);
  lines.Add("#define INIT_FOLLOW_OF_ALT_TYPE_DECL_TAIL \\\n  ");
  lines.Add(set.PrintLiteral());

  lines.Add("\n");

  lines.Add("#endif /* M2C_FOLLOW_SET_INITS_H */\n\n");

  lines.Add("/* END OF FILE */\n");

            #endregion

            #region various
            // Token[] tokens = new Token[Enum.GetNames(typeof(Token)).Length];

            //for (int i = 1; i < (tokens.Length-1); i++)
            //{
            //    tokens[i-1] = (Token)i;
            //}
            //tokens[tokens.Length - 2] = Token.EndOfFile;
            //tokens[tokens.Length-1] = 0;

            //TokenSet set = TokenSet.newFromList(tokens);
            //lines.AddLine("NEW SET!");

            ////testing isElement(), newFromList()
            //lines.AddLine("Set Constructed Correctly: " + fromListAssignmentWorking(set, tokens)); 

            ////testing segmentCount
            //lines.AddLine();
            //lines.AddLine("Number of Segments: " + TokenSet.segmentCount);

            ////testing CountBits()
            //lines.AddLine();
            //lines.AddLine("Number of Bits: " + set.Count());


            ////testing Count(), elemCount
            //lines.AddLine();
            //lines.AddLine("Count(): " + set.Count());

            ////testing ElementList()
            //List<Token> tokenList = set.ElementList();

            //lines.AddLine();
            //lines.AddLine("Testing ElementList()");
            //foreach (Token t in tokenList)
            //{
            //    lines.AddLine(TokenSet.lexemeTable[(int)t]);
            //}

            ////testing PrintSet()
            //lines.AddLine();
            //lines.AddLine("Testing PrintSet:");
            //set.PrintSet("set");

            ////testing PrintList()
            //lines.AddLine();
            //lines.AddLine("Testing PrintList:");
            //set.PrintList();

            ////testing set.set.PrintLiteralStruct()
            //lines.AddLine();
            //lines.AddLine("Testing set.set.PrintLiteralStruct:");
            //set.set.set.PrintLiteralStruct("set");

            ////testing lines.Add(set.PrintLiteral())
            //lines.AddLine();
            //lines.AddLine("Testing set.PrintLiteral:");
            //set.lines.Add(set.PrintLiteral());

            //TokenSet smallSet = TokenSet.newFromList(Token.AND, Token.ARGLIST, Token.Assign, Token.ARRAY, Token.Asterisk, Token.Backslash, Token.Bar, Token.Unknown);
            //TokenSet disjunctSet = TokenSet.newFromList(Token.Backslash, Token.BEGIN, Token.Bar, Token.Unknown);
            //lines.AddLine("smallSet: ");
            //smallSet.PrintList();
            //lines.AddLine("disjunctSet: ");
            //disjunctSet.PrintList();
            //lines.AddLine(disjunctSet.Count());
            //lines.AddLine("disjunctSet contains Backslash: " + disjunctSet.IsElement(Token.Backslash));

            ////testing IsDijunct()
            //lines.AddLine();
            //lines.AddLine("Testing IsDisjunct()");
            //lines.AddLine("This should be true: " + smallSet.IsDisjunct(disjunctSet));
            //lines.AddLine("This should be false: " + set.IsDisjunct(smallSet));

            ////testing newFromUnion()
            //lines.AddLine();
            //lines.AddLine("Testing newFromUnion()");
            //TokenSet union = TokenSet.newFromUnion(smallSet, disjunctSet);
            //union.PrintList();
            
            ////testing IsSubset()
            //lines.AddLine();
            //lines.AddLine("Testing IsSubset()");
            //lines.AddLine("This should be true: " + smallSet.IsSubset(set));
            //lines.AddLine("This should be false: " + smallSet.IsSubset(disjunctSet));

  //static private bool fromListAssignmentWorking(TokenSet set, params Token[] tokens)
  //{
  //    foreach (Token t in tokens)
  //    {
  //        if (!set.IsElement(t))
  //            return false;
  //    }
  //    return true;
  //}
            #endregion

  System.IO.File.WriteAllLines(@"C:\Users\Sam.Delaney\Summer 17\m2sharp-master\Imitation Tests\TestResults\Output.txt", lines);
  Console.ReadKey();
        }

        }
    }

